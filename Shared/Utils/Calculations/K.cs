using System;
using System.Linq;
namespace Utils.Calculations
{
    public class K
    {
        #region methods

        /// <summary>
        /// 
        /// </summary>
        /// <param name="p">Давление газа в аппарате, кг/см²</param>
        /// <param name="d">Диаметр свечи, м</param>
        /// <param name="l">Длина дренажной линии, м</param>
        /// <returns></returns>
        public static double CalcK(double p, double d, double l)
        {

            var table = d > 0.02 ? GetTable1() : GetTable2();

           return CalcK(table,p,d,l);

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="table"></param>
        /// <param name="p">Давление газа в аппарате, кг/см²</param>
        /// <param name="d">Диаметр свечи, м</param>
        /// <param name="l">Длина дренажной линии, м</param>
        /// <returns></returns>
        public static double CalcK(double[][] table, double p, double d, double l)
        {
            // 1 выборка массива по давлению
            const int columnOffset = 3;
            var data = table.Skip(1);
            var pData = data.Where(e => e[0] <= p && e[1] >= p).ToArray();
            // 2 выборка строк в массиве с индексом по диаметру
            var dData = pData.Select(e => e[2]).ToArray();
            int dIndex0 = 0, dIndex1 = 0;
            var dValue0 = GetFirstValue(dData, d, ref dIndex0, true, true);
            var dValue1 = GetFirstValue(dData, d, ref dIndex1, false);
            // 3 выборка столбца по длине
            var lData = table[0].Skip(columnOffset).ToArray();
            int lIndex0 = 0, lIndex1 = 0;
            var lValue0 = GetFirstValue(lData, l, ref lIndex0, false, true);
            var lValue1 = GetFirstValue(lData, l, ref lIndex1);
            //
            lIndex0 += columnOffset;
            lIndex1 += columnOffset;
            //
            var t00 = pData[dIndex0][lIndex0];
            var t01 = pData[dIndex0][lIndex1];
            var t10 = pData[dIndex1][lIndex0];
            var t11 = pData[dIndex1][lIndex1];
            //
            return Interpolation.Interpolate2(d, dValue0, dValue1, l, lValue0, lValue1, t00, t01, t10, t11);
        }
        public static double[][] GetTable1()
        {
            return new[]{
                new[]{-3, -2, -1, 0, 1, 5, 10, 20, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000.0},

                new[]{75, 100, 0.3, 0.993, 0.993, 0.991, 0.991, 0.989, 0.986, 0.979, 0.967, 0.956, 0.944, 0.933, 0.923, 0.913, 0.903, 0.893, 0.884},
                new[]{75, 100, 0.15, 0.993, 0.993, 0.991, 0.988, 0.983, 0.968, 0.945, 0.903, 0.865, 0.832, 0.802, 0.776, 0.751, 0.729, 0.708, 0.689},
                new[]{75, 100, 0.1, 0.993, 0.992, 0.987, 0.982, 0.971, 0.939, 0.893, 0.817, 0.757, 0.708, 0.668, 0.633, 0.603, 0.578, 0.554, 0.534},
                new[]{75, 100, 0.08, 0.993, 0.991, 0.984, 0.976, 0.959, 0.912, 0.848, 0.75, 0.68, 0.625, 0.582, 0.546, 0.517, 0.491, 0.469, 0.449},
                new[]{75, 100, 0.05, 0.993, 0.989, 0.971, 0.949, 0.911, 0.817, 0.708, 0.578, 0.499, 0.445, 0.406, 0.375, 0.35, 0.329, 0.311, 0.296},
                new[]{75, 100, 0.025, 0.993, 0.975, 0.91, 0.845, 0.746, 0.578, 0.445, 0.329, 0.272, 0.237, 0.213, 0.194, 0.18, 0.168, 0.158, 0.149},

                new[]{50, 75, 0.3, 0.984, 0.984, 0.983, 0.982, 0.981, 0.978, 0.972, 0.96, 0.949, 0.939, 0.928, 0.918, 0.908, 0.899, 0.89, 0.881},
                new[]{50, 75, 0.15, 0.983, 0.983, 0.981, 0.979, 0.974, 0.961, 0.939, 0.898, 0.863, 0.831, 0.802, 0.777, 0.753, 0.731, 0.711, 0.692},
                new[]{50, 75, 0.1, 0.983, 0.982, 0.978, 0.973, 0.962, 0.933, 0.889, 0.817, 0.759, 0.711, 0.672, 0.638, 0.608, 0.583, 0.56, 0.539},
                new[]{50, 75, 0.08, 0.983, 0.982, 0.975, 0.967, 0.951, 0.908, 0.846, 0.752, 0.683, 0.63, 0.587, 0.552, 0.522, 0.497, 0.474, 0.455},
                new[]{50, 75, 0.05, 0.983, 0.979, 0.962, 0.942, 0.906, 0.817, 0.711, 0.583, 0.505, 0.45, 0.411, 0.38, 0.354, 0.334, 0.316, 0.301},
                new[]{50, 75, 0.025, 0.983, 0.967, 0.906, 0.843, 0.748, 0.582, 0.45, 0.333, 0.276, 0.241, 0.216, 0.197, 0.182, 0.17, 0.16, 0.152},

                new[]{15, 50, 0.3, 0.981, 0.981, 0.98, 0.98, 0.979, 0.975, 0.97, 0.959, 0.948, 0.938, 0.928, 0.918, 0.909, 0.899, 0.891, 0.882},
                new[]{15, 50, 0.15, 0.981, 0.981, 0.979, 0.976, 0.972, 0.959, 0.938, 0.899, 0.865, 0.834, 0.806, 0.78, 0.757,0.736, 0.716, 0.697},
                new[]{15, 50, 0.1, 0.981, 0.98, 0.976, 0.971, 0.961, 0.932, 0.89, 0.819, 0.762, 0.716, 0.676, 0.642, 0.613,0.588, 0.565, 0.544},
                new[]{15, 50, 0.08, 0.981, 0.979, 0.973, 0.965, 0.95, 0.908, 0.848, 0.756, 0.688, 0.635, 0.592, 0.557, 0.527, 0.502, 0.479, 0.46},
                new[]{15, 50, 0.05, 0.981, 0.977, 0.961, 0.942, 0.906, 0.819, 0.716, 0.588, 0.51, 0.455, 0.416, 0.384, 0.359, 0.338, 0.32, 0.305},
                new[]{15, 50, 0.025, 0.981, 0.965, 0.906, 0.845, 0.752, 0.588, 0.455, 0.338, 0.279, 0.244, 0.219, 0.2, 0.185, 0.173, 0.163, 0.154},

                new[]{1, 15, 0.3, 0.982, 0.982, 0.981, 0.981, 0.98, 0.976, 0.971, 0.96, 0.95, 0.939, 0.93, 0.92, 0.911, 0.902, 0.893, 0.884},
                new[]{1, 15, 0.15, 0.982, 0.982, 0.98, 0.978, 0.973, 0.96, 0.939, 0.901, 0.867, 0.837, 0.809, 0.784, 0.76, 0.739, 0.72, 0.701},
                new[]{1, 15, 0.1, 0.982, 0.981, 0.977, 0.972, 0.962, 0.934, 0.892, 0.822, 0.766, 0.719, 0.68, 0.646, 0.617, 0.592, 0.569, 0.547},
                new[]{1, 15, 0.08, 0.982, 0.981, 0.974, 0.967, 0.952, 0.91, 0.851, 0.759, 0.691, 0.639, 0.596, 0.56, 0.521,0.489, 0.462, 0.439},
                new[]{1, 15, 0.05, 0.982, 0.978, 0.962, 0.943, 0.909, 0.822, 0.719, 0.592, 0.51, 0.454, 0.413, 0.381, 0.355,0.334, 0.317, 0.301},
                new[]{1, 15, 0.025, 0.982, 0.966, 0.909, 0.848, 0.756, 0.592, 0.454, 0.336, 0.275, 0.238, 0.213, 0.195, 0.18,0.168, 0.159, 0.15},

                new[]{.5, 1, 0.3, 0.983, 0.983, 0.982, 0.982, 0.981, 0.977, 0.972, 0.961, 0.95, 0.94, 0.93, 0.921, 0.911, 0.902,0.894, 0.885},
                new[]{.5, 1, 0.15, 0.983, 0.982, 0.981, 0.978, 0.974, 0.961, 0.94, 0.902, 0.868, 0.838, 0.81, 0.785, 0.762, 0.74,0.72, 0.702},
                new[]{.5, 1, 0.1, 0.983, 0.982, 0.978, 0.973, 0.963, 0.935, 0.893, 0.823, 0.766, 0.719, 0.68, 0.646, 0.617, 0.591,0.568, 0.544},
                new[]{.5, 1, 0.08, 0.983, 0.981, 0.975, 0.967, 0.952, 0.911, 0.851, 0.76, 0.691, 0.639, 0.596, 0.56, 0.521, 0.489,0.462, 0.439},
                new[]{.5, 1, 0.05, 0.983, 0.979, 0.963, 0.944, 0.909, 0.823, 0.719, 0.591, 0.499, 0.434, 0.39, 0.357, 0.331, 0.31,0.292, 0.277},
                new[]{.5, 1, 0.025, 0.983, 0.967, 0.909, 0.849, 0.756, 0.591, 0.434, 0.31, 0.253, 0.219, 0.196, 0.179, 0.166,0.155, 0.146, 0.138},

                new[]{0, 0.5, 0.3, 0.983, 0.983, 0.982, 0.982, 0.981, 0.977, 0.972, 0.961, 0.95, 0.94, 0.93, 0.921, 0.911, 0.902,0.893, 0.885},
                new[]{0, 0.5, 0.15, 0.983, 0.982, 0.981, 0.978, 0.974, 0.961, 0.94, 0.902, 0.868, 0.837, 0.81, 0.784, 0.761,0.735, 0.7, 0.67},
                new[]{0, 0.5, 0.1, 0.983, 0.982, 0.978, 0.973, 0.963, 0.935, 0.893, 0.822, 0.766, 0.699, 0.636, 0.587, 0.548,0.517, 0.489, 0.466},
                new[]{0, 0.5, 0.08, 0.983, 0.981, 0.975, 0.967, 0.952, 0.911, 0.851, 0.759, 0.654, 0.576, 0.522, 0.48, 0.447,0.42, 0.397, 0.377},
                new[]{0, 0.5, 0.05, 0.983, 0.979, 0.963, 0.944, 0.909, 0.822, 0.698, 0.516, 0.428, 0.373, 0.335, 0.306, 0.284,0.266, 0.251, 0.238},
                new[]{0, 0.5, 0.025, 0.983, 0.967, 0.909, 0.848, 0.756, 0.516, 0.373, 0.266, 0.217, 0.188, 0.168, 0.153, 0.141,0.132, 0.124, 0.118},
            };
        }
        public static double[][] GetTable2()
        {
            return new[]{
                new[]{-3, -2, -1, 0, 1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100.0},

                new[]{75, 100, 0.02, 0.982, 0.956, 0.931, 0.909, 0.887, 0.867, 0.784, 0.67, 0.594, 0.538, 0.496, 0.462, 0.434, 0.41, 0.39, 0.373},
                new[]{75, 100, 0.014, 0.985, 0.933, 0.887, 0.848, 0.813, 0.782, 0.667, 0.535, 0.458, 0.407, 0.37, 0.34, 0.317, 0.298, 0.282, 0.269},
                new[]{75, 100, 0.01, 0.982, 0.887, 0.815, 0.757, 0.709, 0.67, 0.538, 0.411, 0.343, 0.301, 0.271, 0.249, 0.231, 0.216, 0.204, 0.193},
                new[]{75, 100, 0.007, 0.982, 0.812, 0.706, 0.632, 0.577, 0.535, 0.407, 0.298, 0.246, 0.214, 0.191, 0.175, 0.162, 0.151, 0.142, 0.135},

                new[]{50, 75, 0.02, 0.983, 0.957, 0.933, 0.91, 0.889, 0.869, 0.786, 0.672, 0.595, 0.539, 0.497, 0.462, 0.434, 0.411, 0.391, 0.373},
                new[]{50, 75, 0.014, 0.984, 0.934, 0.889, 0.851, 0.817, 0.786, 0.672, 0.539, 0.462, 0.411, 0.373, 0.344, 0.32, 0.301, 0.285, 0.271},
                new[]{50, 75, 0.01, 0.979, 0.887, 0.816, 0.759, 0.713, 0.674, 0.542, 0.414, 0.346, 0.304, 0.274, 0.251, 0.233, 0.218, 0.206, 0.195},
                new[]{50, 75, 0.007, 0.983, 0.814, 0.708, 0.634, 0.579, 0.535, 0.407, 0.298, 0.246, 0.214, 0.191, 0.174, 0.161, 0.15, 0.142, 0.135},

                new[]{15, 50, 0.02, 0.981, 0.956, 0.932, 0.911, 0.89, 0.871, 0.79, 0.677, 0.6, 0.544, 0.502, 0.467, 0.439, 0.416, 0.395, 0.377},
                new[]{15, 50, 0.014, 0.982, 0.932, 0.889, 0.852, 0.818, 0.788, 0.675, 0.543, 0.466, 0.414, 0.376, 0.346, 0.323, 0.303, 0.287, 0.273},
                new[]{15, 50, 0.01, 0.98, 0.89, 0.82, 0.763, 0.717, 0.678, 0.546, 0.417, 0.349, 0.306, 0.276, 0.253, 0.235, 0.22, 0.207, 0.197},
                new[]{15, 50, 0.007, 0.981, 0.817, 0.712, 0.639, 0.584, 0.54, 0.412, 0.302, 0.249, 0.217, 0.194, 0.177, 0.163, 0.152, 0.144, 0.136},

                new[]{1, 15, 0.02, 0.982, 0.958, 0.934, 0.913, 0.892, 0.873, 0.793, 0.68, 0.604, 0.547, 0.502, 0.466, 0.437, 0.413, 0.392, 0.374},
                new[]{1, 15, 0.014, 0.983, 0.934, 0.891, 0.854, 0.82, 0.79, 0.677, 0.544, 0.464, 0.41, 0.372, 0.342, 0.318, 0.299, 0.282, 0.268},
                new[]{1, 15, 0.01, 0.984, 0.893, 0.823, 0.767, 0.72, 0.681, 0.549, 0.414, 0.345, 0.301, 0.271, 0.248, 0.23, 0.215, 0.203, 0.192},
                new[]{1, 15, 0.007, 0.982, 0.82, 0.716, 0.643, 0.588, 0.543, 0.409, 0.297, 0.245, 0.212, 0.19, 0.173, 0.16, 0.149, 0.141, 0.134},

                new[]{.5, 1, 0.02, 0.983, 0.958, 0.935, 0.913, 0.893, 0.874, 0.793, 0.658, 0.568, 0.504, 0.454, 0.416, 0.386, 0.363, 0.342, 0.325},
                new[]{.5, 1, 0.014, 0.983, 0.934, 0.891, 0.854, 0.82, 0.79, 0.656, 0.516, 0.426, 0.371, 0.333, 0.304, 0.282, 0.264, 0.249, 0.236},
                new[]{.5, 1, 0.01, 0.985, 0.894, 0.824, 0.767, 0.712, 0.661, 0.509, 0.365, 0.299, 0.259, 0.232, 0.212, 0.196, 0.183, 0.173, 0.164},
                new[]{.5, 1, 0.007, 0.983, 0.82, 0.704, 0.612, 0.549, 0.5, 0.359, 0.255, 0.208, 0.18, 0.161, 0.147, 0.135, 0.126, 0.119, 0.113},

                new[]{0, 0.5, 0.02, 0.983, 0.958, 0.935, 0.913, 0.893, 0.874, 0.793, 0.636, 0.532, 0.466, 0.42, 0.385, 0.357, 0.335, 0.316, 0.3},
                new[]{0, 0.5, 0.014, 0.983, 0.934, 0.891, 0.853, 0.82, 0.79, 0.636, 0.466, 0.384, 0.334, 0.3, 0.274, 0.254,  0.237, 0.224, 0.212},
                new[]{0, 0.5, 0.01, 0.985, 0.894, 0.824, 0.767, 0.704, 0.642, 0.47, 0.338, 0.277, 0.24, 0.215, 0.196, 0.181, 0.169, 0.159, 0.151},
                new[]{0, 0.5, 0.007, 0.982, 0.819, 0.692, 0.581, 0.511, 0.461, 0.332, 0.236, 0.193, 0.166, 0.149, 0.135, 0.125, 0.117, 0.11, 0.104}
            };
        }
        public static double GetFirstValue(double[] array, double val, ref int index,
                                           bool max = true, bool reverse = false)
        {
            Func<double, double, bool> condition;
            if (max) condition = (a, b) => a >= b;
            else condition = (a, b) => a <= b;
            double result = 0;
            var indexResult = 0;
            Func<double, int, bool> setResult = (a, b) =>
            {
                result = a;
                indexResult = b;
                return condition(a, val);
            };
            if (reverse) IterateReverse(array, setResult);
            else Iterate(array, setResult);
            index = indexResult;
            return result;
        }
        public static void Iterate(double[] array, Func<double, int, bool> action)
        {
            for (var i = 0; i < array.Length; i++)
                if (action.Invoke(array[i], i)) break;
        }
        public static void IterateReverse(double[] array, Func<double, int, bool> action)
        {
            for (var i = array.Length - 1; i > -1; i--)
                if (action.Invoke(array[i], i)) break;
        }
        #endregion
    }
}
