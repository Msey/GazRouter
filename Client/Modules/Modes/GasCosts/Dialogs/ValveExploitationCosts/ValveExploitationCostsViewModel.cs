using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using GazRouter.Common.ViewModel;
using GazRouter.DTO.Dictionaries.Targets;
using GazRouter.DTO.GasCosts;
using GazRouter.Modes.GasCosts.DefaultDataDialog;
using GazRouter.Modes.GasCosts.Dialogs.Model;
using GazRouter.Modes.GasCosts.Dialogs.ValveControlCosts;
using GazRouter.Modes.GasCosts.Dialogs.ViewModel;
using JetBrains.Annotations;
namespace GazRouter.Modes.GasCosts.Dialogs.ValveExploitationCosts
{
    public class ValveExploitationCostsViewModel : CalcViewModelBase<ValveExploitationCostsModel>
    {
        public ValveExploitationCostsViewModel([NotNull] GasCostDTO gasCost,
            Action<GasCostDTO> closeCallback,
            List<DefaultParamValues> defaultParamValues, bool ShowDayly,
            bool useMeasuringLoader = false) 
            : base(gasCost, closeCallback, defaultParamValues, useMeasuringLoader)
        {

            this.ShowDayly = ShowDayly;
            if (!IsEdit)
            {
                // Если вводится фактическое значение и выбран текущий месяц, 
                // то устанавливать дату в текущий день
                if (TargetId == Target.Fact && IsCurrentMonth)
                    EventDate = EventDate.AddDays(DateTime.Now.Day - EventDate.Day);
            }
#region Regulator
            RegulatorRuntimes = ClientCache.DictionaryRepository.RegulatorTypes
                 .Select(r => new RegulatorRuntime
                 {
                     Id = r.Id,
                     Name = r.Name,
                     RatedConsumption = r.GasConsumptionRate,
                     Count = 0,
                     Runtime = 0
                 })
                .Select(r => new RegulatorRuntimeViewModel(r)).ToList();
            RegulatorRuntimes.Add(
                new RegulatorRuntimeViewModel(new RegulatorRuntime
                {
                    Name = "Прочее",
                    RatedConsumption = 1.0
                }));
            RegulatorRuntimes.ForEach(
                v =>
                {
                    var vm =
                 Model.RegulatorRuntimes.SingleOrDefault(c => Equals(c, v.Model));
                    if (vm != null)
                    {
                        v.Model.Count = vm.Count;
                        v.Model.Runtime = vm.Runtime;
                    }
                    v.PropertyChanged += RegulatorRuntimeViewModelOnPropertyChanged;
                });
#endregion
            SetValidationRules();
            PerformCalculate();
        }
        private void RegulatorRuntimeViewModelOnPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName != "Count" && e.PropertyName != "Runtime")
                return;

            var vm = (ValveControlCosts.RegulatorRuntimeViewModel)(sender);
            if (Model.RegulatorRuntimes.Contains(vm.Model))
            {
                Model.RegulatorRuntimes.Remove(vm.Model);
            }
            if (vm.Count != 0 || vm.Runtime != 0)
                Model.RegulatorRuntimes.Add(vm.Model);
            OnPropertyChanged(() => RegulatorConsumption);
            PerformCalculate();
        }
        public List<RegulatorRuntimeViewModel> RegulatorRuntimes { get; set; }
        public double RegulatorConsumption
        {
            get
            {
                return RegulatorRuntimes.Sum(vt => vt.Q);
            }
        }

        protected override void SetValidationRules()
        {
        }
    }
}
