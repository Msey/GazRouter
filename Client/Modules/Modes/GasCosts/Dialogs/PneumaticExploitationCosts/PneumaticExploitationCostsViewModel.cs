using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using GazRouter.DTO.Dictionaries.Targets;
using GazRouter.DTO.GasCosts;
using GazRouter.Modes.GasCosts.DefaultDataDialog;
using GazRouter.Modes.GasCosts.Dialogs.Model;
using GazRouter.Modes.GasCosts.Dialogs.ValveControlCosts;
using GazRouter.Modes.GasCosts.Dialogs.ViewModel;
using JetBrains.Annotations;
namespace GazRouter.Modes.GasCosts.Dialogs.PneumaticExploitationCosts
{
    public class PneumaticExploitationCostsViewModel : CalcViewModelBase<PneumaticExploitationCostsModel>
    {
        public PneumaticExploitationCostsViewModel([NotNull] GasCostDTO gasCost, Action<GasCostDTO> closeCallback, List<DefaultParamValues> defaultParamValues,bool ShowDayly, bool useMeasuringLoader = false) : base(gasCost, closeCallback, defaultParamValues, useMeasuringLoader)
        {
            this.ShowDayly = ShowDayly;
            if (!IsEdit)
            {
                if (TargetId == Target.Fact && IsCurrentMonth)
                    EventDate = EventDate.AddDays(DateTime.Now.Day - EventDate.Day);
            }
            ValveShiftings = ClientCache.DictionaryRepository.ValveTypes
                    .Select(v => new ValveShifting
                    {
                        Id = v.Id,
                        Name = v.Name,
                        RatedConsumption = v.RatedConsumption,
                        Count = 0
                    })
                    .Select(vs => new ValveShiftingViewModel(vs)).ToList();
            ValveShiftings.ForEach(
                v =>
                {
                    var vm =
                    Model.ValveShiftings.SingleOrDefault(c => Equals(c, v.Model));
                    if (vm != null) v.Model.Count = vm.Count;
                    v.PropertyChanged += ValveShiftingViewModelOnPropertyChanged;
                });
            SetValidationRules();
            PerformCalculate();
        }

        private void ValveShiftingViewModelOnPropertyChanged(object sender,
                                                             PropertyChangedEventArgs e)
        {
            if (e.PropertyName != "Count")
                return;

            var vm = (ValveShiftingViewModel)(sender);
            if (Model.ValveShiftings.Contains(vm.Model))
            {
                Model.ValveShiftings.Remove(vm.Model);
            }
            if (vm.Count != 0)
                Model.ValveShiftings.Add(vm.Model);
            OnPropertyChanged(() => ValveConsumption);
            PerformCalculate();
        }
        public double ValveConsumption
        {
            get
            {
                return ValveShiftings.Sum(vt => vt.Q);
            }
        }
        public List<ValveShiftingViewModel> ValveShiftings { get; set; }
        protected override void SetValidationRules()
        {
            
        }
    }
}
